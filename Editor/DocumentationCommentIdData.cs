#nullable enable
using System;
using System.Collections.Generic;
using System.Linq;

namespace Dcid
{
    public enum DefinitionType
    {
        Assembly,
        Class,
        Method,
        Property,
        Field,
        Other,
    }

    [Serializable]
    public class DocumentationCommentIdData
    {
        public DefinitionType type;
        public bool isAutoGenerated;
        public string? minimallyQualifiedName;
        public string? fullQualifiedName;
        public string? documentationCommentId;
        public string? documentationComment;
    }

    [Serializable]
    public class AssemblyDocumentationCommentIdData
    {
        public DocumentationCommentIdData? assemblyData;
        public List<ClassDocumentationCommentIdData> classes = new();

        public override string ToString()
        {
            using var _ = DocumentationCommentIdUtility.StringBuilderPool.Get(out var sb);
            sb.AppendLine(assemblyData?.minimallyQualifiedName ?? "null");
            sb.AppendLine(assemblyData?.fullQualifiedName ?? "null");
            foreach (var classData in classes)
            {
                sb.AppendLine(classData.ToString());
            }

            return sb.ToString();
        }
    }

    [Serializable]
    public class ClassDocumentationCommentIdData
    {
        public DocumentationCommentIdData? classData;
        public List<DocumentationCommentIdData> methodDataList = new();
        public List<DocumentationCommentIdData> propertyDataList = new();
        public List<DocumentationCommentIdData> fieldDataList = new();
        public List<DocumentationCommentIdData> otherDataList = new();

        public IEnumerable<DocumentationCommentIdData> GetMembers()
        {
            return methodDataList
                .Concat(propertyDataList)
                .Concat(fieldDataList)
                .Concat(otherDataList);
        }

        public override string ToString()
        {
            using var _ = DocumentationCommentIdUtility.StringBuilderPool.Get(out var sb);
            sb.Append(classData?.minimallyQualifiedName ?? "null");
            sb.Append("\t: ");
            sb.AppendLine(classData?.documentationCommentId ?? "null");
            sb.AppendLine(classData?.fullQualifiedName ?? "null");
            foreach (var member in GetMembers())
            {
                sb.Append("  ");
                sb.Append(member.minimallyQualifiedName ?? "null");
                sb.Append("\t: ");
                sb.AppendLine(member.documentationCommentId ?? "null");
            }

            return sb.ToString();
        }
    }
}